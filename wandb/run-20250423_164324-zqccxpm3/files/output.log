üìü ¬†Training on MPS
Model¬†v1 | MPS:   4%|‚ñà‚ñà‚ñç                                                          | 16/400 [00:02<00:56,  6.80it/s, KL=1.0452, Loss=22.9123, Rew_Avg=225.67, Rew_Max=517.45]
Traceback (most recent call last):
  File "/Users/arthur/Library/Mobile Documents/com~apple~CloudDocs/Cours/ECN6338/Devoir aÃÄ rendre/Remise/train.py", line 335, in <module>
    train(cfg)
    ~~~~~^^^^^
  File "/Users/arthur/Library/Mobile Documents/com~apple~CloudDocs/Cours/ECN6338/Devoir aÃÄ rendre/Remise/train.py", line 264, in train
    seq_logp, selected = model.generate_trajectories(B, u, t, cfg.batch_size, num_items, device)
                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/Users/arthur/Library/Mobile Documents/com~apple~CloudDocs/Cours/ECN6338/Devoir aÃÄ rendre/Remise/models/baseline_v1.py", line 114, in generate_trajectories
    action_prob = self.forward(selected, Budget, u, t)
  File "/Users/arthur/Library/Mobile Documents/com~apple~CloudDocs/Cours/ECN6338/Devoir aÃÄ rendre/Remise/models/baseline_v1.py", line 85, in forward
    x = F.relu(self.norm3(self.fc3(x)))
               ~~~~~~~~~~^^^^^^^^^^^^^
  File "/Users/arthur/miniconda3/envs/ECN6338/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ~~~~~~~~~~~~~~~^^^^^^^^^^^^^^^^^
  File "/Users/arthur/miniconda3/envs/ECN6338/lib/python3.13/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
  File "/Users/arthur/miniconda3/envs/ECN6338/lib/python3.13/site-packages/torch/nn/modules/normalization.py", line 217, in forward
    return F.layer_norm(
           ~~~~~~~~~~~~^
        input, self.normalized_shape, self.weight, self.bias, self.eps
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
  File "/Users/arthur/miniconda3/envs/ECN6338/lib/python3.13/site-packages/torch/nn/functional.py", line 2910, in layer_norm
    return torch.layer_norm(
           ~~~~~~~~~~~~~~~~^
        input, normalized_shape, weight, bias, eps, torch.backends.cudnn.enabled
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    )
    ^
KeyboardInterrupt
